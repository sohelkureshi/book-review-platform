<%- include('./partials/header.ejs') %>

<section class="container2">
    <img src="https://covers.openlibrary.org/b/isbn/<%= book.isbn %>-L.jpg" alt="">
    <div class="book-detail">
        <div class="bd-div">
            <span class="tag-isbn">
                ISBN: <%= book.isbn %>
            </span> 
<span class="tag-genre">
    <a 
      style="color: white; text-decoration: none;" 
      href="/?genre=<%= encodeURIComponent(book.genre) %><%= locals.currentSort ? '&sort=' + encodeURIComponent(locals.currentSort) : '' %>">
        <%= book.genre %>
    </a>
</span>

        <h2><%= book.title %></h2>
        <h3>By <%= book.author %></h3>
        <div class="rating book-rating" title="Average: <%= book.averageRating ? book.averageRating.toFixed(1) : 'N/A' %>">
            <% 
                const avg = book.averageRating || 0;
                for (let i = 1; i <= 5; i++) { 
            %>
                <span class="star" style="color:<%= i <= Math.round(avg) ? '#f39c12' : '#ccc' %>;">★</span>
            <% } %>
            <span class="review-count">
                (<%= book.reviews ? book.reviews.length : 0 %> reviews)
            </span>
        </div>
    </div>
</section>

<section class="container3">
    <h2 class="review-text">User Reviews</h2>
    <!-- Review submission form for authenticated users who haven't reviewed yet -->
    <% if (user && !(book.reviews && book.reviews.some(r => r.user && r.user._id == user._id))) { %>
    <form id="reviewForm" onsubmit="submitReview(event)">
        <input type="hidden" name="bookId" value="<%= book._id %>">
        <div>
            <label>Rating:
                <select name="rating" required>
                    <option value="">Select</option>
                    <option value="5">5 Stars</option>
                    <option value="4">4 Stars</option>
                    <option value="3">3 Stars</option>
                    <option value="2">2 Stars</option>
                    <option value="1">1 Star</option>
                </select>
            </label>
        </div>
        <div>
            <label>Comment:
                <textarea name="comment" required></textarea>
            </label>
        </div>
        <button type="submit">Submit Review</button>
    </form>
    <% } %>

    <!-- List paginated reviews -->
    <div class="reviews-list">
        <% if (book.reviews && book.reviews.length > 0) { %>
            <% book.reviews.forEach(function(review) { %>
                <div class="review-item" data-review-id="<%= review._id %>">
                    <div>
                        <strong>
                            <%= review.user ? (review.user.firstname + " " + review.user.lastname) : "User" %>
                        </strong>
                        <span class="rating">
                            <% for (let i = 1; i <= 5; i++) { %>
                                <span class="star" style="color:<%= i <= review.rating ? '#f39c12' : '#ccc' %>;">★</span>
                            <% } %>
                        </span>
                        <small><%= new Date(review.createdAt).toLocaleDateString() %></small>
                    </div>
                    <p><%= review.comment %></p>
        <% if (
        user && review.user && (
            review.user._id?.toString() === user._id?.toString() ||
            review.user?.toString() === user._id?.toString()
        )
        ) { %>
        <button onclick="editReview('<%= review._id %>')">Edit</button>
        <button onclick="deleteReview('<%= review._id %>')">Delete</button>
        <% } %>

                </div>
            <% }) %>
        <% } else { %>
            <p>No reviews yet.</p>
        <% } %>
    </div>

    <!-- Pagination controls -->
    <% if (reviewPagination && reviewPagination.totalPages > 1) { %>
    <nav class="pagination">
        <% if (reviewPagination.page > 1) { %>
            <a href="/book/<%= book._id %>/<%= book.title.replace(/\s+/g, '-') %>?page=<%= reviewPagination.page - 1 %>">&laquo; Previous</a>
        <% } %>
        <% for (let i = 1; i <= reviewPagination.totalPages; i++) { %>
            <% if (i === reviewPagination.page) { %>
                <span class="current"><%= i %></span>
            <% } else { %>
                <a href="/book/<%= book._id %>/<%= book.title.replace(/\s+/g, '-') %>?page=<%= i %>"><%= i %></a>
            <% } %>
        <% } %>
        <% if (reviewPagination.page < reviewPagination.totalPages) { %>
            <a href="/book/<%= book._id %>/<%= book.title.replace(/\s+/g, '-') %>?page=<%= reviewPagination.page + 1 %>">Next &raquo;</a>
        <% } %>
    </nav>
    <% } %>
</section>

<script>
// SUBMIT REVIEW
async function submitReview(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const bookId = formData.get('bookId');
    
    try {
        const response = await fetch(`/books/${bookId}/reviews`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                rating: formData.get('rating'),
                comment: formData.get('comment')
            })
        });

        if (response.ok) {
            window.location.reload();
        } else {
            let errorMsg = 'Failed to submit review';
            try {
                const errorData = await response.json();
                errorMsg = errorData.message || errorMsg;
            } catch {
                errorMsg = await response.text() || errorMsg;
            }
            alert(`Error: ${errorMsg}`);
        }
    } catch (err) {
        alert('Network Error: Could not connect to server');
    }
}

// DELETE REVIEW
async function deleteReview(reviewId) {
    if (!confirm('Are you sure you want to delete this review?')) return;
    
    try {
        const response = await fetch(`/reviews/${reviewId}`, { 
            method: 'DELETE' 
        });

        if (response.ok) {
            window.location.reload();
        } else {
            let errorMsg = 'Failed to delete review';
            try {
                const errorData = await response.json();
                errorMsg = errorData.message || errorMsg;
            } catch {
                errorMsg = await response.text() || errorMsg;
            }
            alert(`Error: ${errorMsg}`);
        }
    } catch (err) {
        alert('Network Error: Could not connect to server');
    }
}

// EDIT REVIEW
function editReview(reviewId) {
    const reviewDiv = document.querySelector(`[data-review-id="${reviewId}"]`);
    if (!reviewDiv) return;

    // Existing review display elements
    const commentP = reviewDiv.querySelector('p');
    const ratingSpans = reviewDiv.querySelectorAll('.rating .star');
    const buttons = reviewDiv.querySelectorAll('button');
    
    // Get current values
    let currentRating = Array.from(ratingSpans).findIndex(star => 
        star.style.color === 'rgb(243, 156, 18)' || star.style.color === '#f39c12'
    ) + 1;
    currentRating = Math.max(currentRating, 1); // Ensure minimum 1 star
    
    // Hide existing elements
    commentP.style.display = 'none';
    buttons.forEach(btn => btn.style.display = 'none');

    // Create edit form
    const form = document.createElement('form');
    form.innerHTML = `
        <div class="form-group">
            <label>Rating:
                <select name="rating" required>
                    ${[1,2,3,4,5].map(i => `
                        <option value="${i}" ${currentRating === i ? 'selected' : ''}>
                            ${i} Star${i !== 1 ? 's' : ''}
                        </option>
                    `).join('')}
                </select>
            </label>
        </div>
        <div class="form-group">
            <label>Comment:
                <textarea name="comment" required>${commentP.textContent}</textarea>
            </label>
        </div>
        <button type="submit" class="btn-save">Save</button>
        <button type="button" class="btn-cancel">Cancel</button>
    `;

    // Form submission handler
    form.onsubmit = async function(e) {
        e.preventDefault();
        const formData = new FormData(form);
        
        try {
            const response = await fetch(`/reviews/${reviewId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    rating: formData.get('rating'),
                    comment: formData.get('comment')
                })
            });

            if (response.ok) {
                window.location.reload();
            } else {
                let errorMsg = 'Failed to update review';
                try {
                    const errorData = await response.json();
                    errorMsg = errorData.message || errorMsg;
                } catch {
                    errorMsg = await response.text() || errorMsg;
                }
                alert(`Error: ${errorMsg}`);
            }
        } catch (err) {
            alert('Network Error: Could not connect to server');
        }
    };

    // Cancel button handler
    form.querySelector('.btn-cancel').onclick = () => {
        form.remove();
        commentP.style.display = '';
        buttons.forEach(btn => btn.style.display = '');
    };

    // Insert form
    commentP.parentNode.insertBefore(form, commentP.nextSibling);
}
</script>


<%- include('./partials/footer.ejs') %>
